module GitHub
  module Replicator
    # Dump replicants in a streaming fashion.
    #
    # The Dumper takes an ActiveRecord object and generates one or more replicant
    # objects. A replicant has the form: [type, id, attributes] and describes
    # exactly one record in the database. The type and id identify the record's
    # model class name string and primary key id, respectively. The attributes
    # is a Hash of primitive typed objects generated by a call to
    # ActiveRecord::Base#attributes.
    #
    # Dumping to an array:
    #
    #     >> dumper = Replicator::Dumper.new
    #     >> dumper.dump(User / :defunkt / :github)
    #     >> pp dumper.to_a
    #
    # Dumping to stdout in marshal format:
    #
    #     >> writer = lambda { |*a| Marshal.dump(a, $stdout) }
    #     >> dumper = Replicator::Dumper.new(&writer)
    #     >> dumper.dump(User / :defunkt / :github)
    class Dumper
      # Create a new Dumper.
      #
      # io     - IO object to write marshalled replicant objects to. When
      #          not given, objects are written to an array available at #to_a.
      # write  - Block called when an object needs to be written. Use this for
      #          complete control over how objects are serialized.
      def initialize(io=nil, &write)
        @objects = []
        @io = io
        @write = write
        @memo = {}
      end

      # Dump one or more objects to the internal array or provided dump
      # stream. This method guarantees that the same object will not be dumped
      # more than once.
      #
      # objects - ActiveRecord object instances.
      #
      # Returns nothing.
      def dump(*objects)
        objects = objects[0] if objects.size == 1 && objects[0].respond_to?(:to_ary)
        objects.each do |object|
          next if object.nil? || dumped?(object)
          if object.respond_to?(:dump_replicant)
            object.dump_replicant(self)
          else
            warn "error: #{object.class} does not define #dump_replicant"
          end
        end
      end

      # Check if object has been dumped yet.
      def dumped?(object)
        if object.respond_to?(:replicant_id)
          type, id = object.replicant_id
        elsif object.is_a?(Array)
          type, id = object
        else
          return false
        end
        @memo["#{type}:#{id}"]
      end

      # Call the write method given in the initializer or write to the internal
      # objects array when no write method was given.
      #
      # type       - The model class name as a String.
      # id         - The record's id. Usually an integer.
      # attributes - All model attributes.
      #
      # Returns nothing.
      def write(type, id, attributes)
        return if dumped?([type, id])
        @memo["#{type}:#{id}"] = true
        @write.call(type, id, attributes) if @write
        if @io
          Marshal.dump([type, id, attributes], @io)
        elsif @write.nil?
          @objects << [type, id, attributes]
        end
      end

      # Grab dumped objects array. Always empty when a custom write function was
      # provided when initialized.
      def to_a
        @objects
      end
    end
  end
end
