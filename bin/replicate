#!/usr/bin/env ruby
#/        script/replicate [-r <lib>] --dump "<ruby>" > objects.dump
#/        script/replicate [-r <lib>] --load < objects.dump
#/ Dump and load objects between environments. The --dump form writes to stdout
#/ the objects returned by evaluating "<ruby>", which must be a valid Ruby
#/ expression. The --load form reads dump data from stdin and loads into the
#/ current environment.
#/
#/ Mode selection:
#/   -d, --dump           Dump the repository and all related objects to stdout.
#/   -l, --load           Load dump file data from stdin.
#/
#/ Options:
#/   -r, --require        Require the library. Often used with 'config/environment'.
#/   -i, --keep-id        Use replicated ids when loading dump file.
#/   -f, --force          Allow loading in production environments.
#/   -v, --verbose        Write more status output.
#/   -q, --quiet          Write less status output.
$stderr.sync = true
require 'optparse'

# default options
mode     = nil
verbose  = false
quiet    = false
keep_id  = false
out      = $stdout
force    = false

# parse arguments
file = __FILE__
usage = lambda { exec "grep ^#/<'#{file}'|cut -c4-" }
original_argv = ARGV.dup
ARGV.options do |opts|
  opts.on("-d", "--dump")      { mode = :dump }
  opts.on("-l", "--load")      { mode = :load }
  opts.on("-r", "--require=f") { |file| require file }
  opts.on("-v", "--verbose")   { verbose = true }
  opts.on("-q", "--quiet")     { quiet = true }
  opts.on("-i", "--keep-id")   { keep_id = true }
  opts.on("--force")           { force = true }
  opts.on_tail("-h", "--help", &usage)
  opts.parse!
end

# load replicate lib and setup AR
require 'replicate'
if defined?(ActiveRecord::Base)
  Replicate::AR
  ActiveRecord::Base.replicate_id = keep_id
  ActiveRecord::Base.connection.enable_query_cache!
end

# dump mode means we're reading records from the database here and writing to
# stdout. the database should not be modified at all by this operation.
if mode == :dump
  usage.call if ARGV.empty? || ARGV[0].empty?
  objects = eval(ARGV[0])
  Replicate::Dumper.new do |dumper|
    dumper.marshal_to out
    dumper.log_to $stderr, verbose, quiet
    dumper.dump objects
  end

# load mode means we're reading objects from stdin and creating them under
# the current environment.
elsif mode == :load
  if Replicate.production_environment? && !force
    abort "error: refusing to load in production environment\n" +
          "       manual override: #{File.basename($0)} --force #{original_argv.join(' ')}"
  else
    Replicate::Loader.new do |loader|
      loader.log_to $stderr, verbose, quiet
      loader.read $stdin
    end
  end

# mode not set means no -l or -d arg was given. show usage and bail.
else
  usage.call
end
